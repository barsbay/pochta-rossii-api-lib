import { PochtaRossiiApi } from '../src';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function discoverApiMethods() {
  console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ API...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const token = process.env.AUTHORIZATION;
  const key = process.env.X_USER_AUTHORIZATION;

  if (!token || !key) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è AUTHORIZATION –∏–ª–∏ X_USER_AUTHORIZATION');
    return;
  }

  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
    const api = new PochtaRossiiApi({
      Authorization: token,
      'X-User-Authorization': key,
      baseUrl: 'https://otpravka-api.pochta.ru'
    });

    // –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const methodsToTest = [
      '/1.0/user/token',
      '/1.0/backlog',
      '/1.0/shipment',
      '/1.0/tariff',
      '/1.0/clean/address',
      '/1.0/clean/fio',
      '/1.0/clean/phone',
      '/1.0/forms',
      '/1.0/postoffice',
      '/1.0/settings',
      '/1.0/counter',
      '/1.0/archive',
      '/postoffice/1.0/by-address',
      '/postoffice/1.0/nearby',
      '/postoffice/1.0/nearest'
    ];

    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤ API:\n');

    for (const method of methodsToTest) {
      try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: ${method}`);
        
        // –ü—Ä–æ–±—É–µ–º GET –∑–∞–ø—Ä–æ—Å
        const response = await api['client'].get(method);
        console.log(`‚úÖ GET ${method} - –î–æ—Å—Ç—É–ø–µ–Ω (${response.status})`);
        
        // –ï—Å–ª–∏ —ç—Ç–æ POST –º–µ—Ç–æ–¥, –ø—Ä–æ–±—É–µ–º –∏ POST
        if (method.includes('/clean/') || method.includes('/tariff')) {
          try {
            const postResponse = await api['client'].post(method, []);
            console.log(`‚úÖ POST ${method} - –î–æ—Å—Ç—É–ø–µ–Ω (${postResponse.status})`);
          } catch (postError: any) {
            if (postError.response?.status === 400) {
              console.log(`‚úÖ POST ${method} - –î–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç –¥–∞–Ω–Ω—ã–µ)`);
            } else {
              console.log(`‚ùå POST ${method} - –û—à–∏–±–∫–∞: ${postError.response?.status || postError.message}`);
            }
          }
        }
        
      } catch (error: any) {
        const status = error.response?.status;
        const message = error.response?.data?.message || error.message;
        
        if (status === 404) {
          console.log(`‚ùå ${method} - –ù–µ –Ω–∞–π–¥–µ–Ω (404)`);
        } else if (status === 407) {
          console.log(`‚ùå ${method} - –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (407: ${message})`);
        } else if (status === 401) {
          console.log(`‚ùå ${method} - –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (401)`);
        } else {
          console.log(`‚ùå ${method} - –û—à–∏–±–∫–∞: ${status || message}`);
        }
      }
      
      console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–µ –º–µ—Ç–æ–¥—ã
    console.log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –º–µ—Ç–æ–¥–æ–≤:\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:');
    try {
      const tokenResponse = await api['client'].get('/1.0/user/token');
      console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', tokenResponse.data);
    } catch (error: any) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.response?.status || error.message);
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç —Ç–∞—Ä–∏—Ñ–∞
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞:');
    try {
      const tariffResponse = await api['client'].post('/1.0/tariff', {
        'index-from': 101000,
        'index-to': 190000,
        'mail-category': 'ORDINARY',
        'mail-type': 'POSTAL_PARCEL',
        mass: 1000,
        fragile: false,
        'with-order-of-notice': false,
        'with-simple-notice': false,
        'with-declared-value': false,
        'declared-value': 0
      });
      console.log('‚úÖ –¢–∞—Ä–∏—Ñ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω:', tariffResponse.data);
    } catch (error: any) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞:', error.response?.status || error.message);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –∞–¥—Ä–µ—Å–∞
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞:');
    try {
      const addressResponse = await api['client'].post('/1.0/clean/address', [{
        id: '1',
        'original-address': '–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1'
      }]);
      console.log('‚úÖ –ê–¥—Ä–µ—Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω:', addressResponse.data);
    } catch (error: any) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞:', error.response?.status || error.message);
    }

    console.log('\nüéâ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error: any) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
discoverApiMethods().catch(console.error); 