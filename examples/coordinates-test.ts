import { PochtaRossiiApi } from '../src';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

const log = {
  info: (msg: string) => console.log(`${colors.cyan}‚ÑπÔ∏è  ${msg}${colors.reset}`),
  success: (msg: string) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  error: (msg: string) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  warning: (msg: string) => console.log(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`),
  title: (msg: string) => console.log(`\n${colors.bright}${colors.blue}${msg}${colors.reset}`),
  section: (msg: string) => console.log(`\n${colors.magenta}üìã ${msg}${colors.reset}`),
  data: (msg: string) => console.log(`${colors.white}${msg}${colors.reset}`)
};

async function testCoordinatesSearch() {
  log.title('üìç –ü–æ–∏—Å–∫ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º');
  
  // Check environment variables
  if (!process.env.AUTHORIZATION || !process.env.X_USER_AUTHORIZATION) {
    log.error('Missing required environment variables!');
    log.info('Please check your .env file contains:');
    log.info('- AUTHORIZATION (your access token)');
    log.info('- X_USER_AUTHORIZATION (your base64 encoded credentials)');
    return;
  }

  // Initialize API client
  const api = new PochtaRossiiApi({
    Authorization: process.env.AUTHORIZATION,
    'X-User-Authorization': process.env.X_USER_AUTHORIZATION
  });

  try {
    log.section('Test 1: –ü–æ–∏—Å–∫ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º');
    log.info('–ò—â–µ–º –æ—Ç–¥–µ–ª–µ–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã...');
    
    const coordinatesRequest = {
      latitude: 55.7558,
      longitude: 37.6176,
      radius: 2000, // 2 –∫–º
      filter: 'ALL' // –≤—Å–µ —Ç–∏–ø—ã –æ—Ç–¥–µ–ª–µ–Ω–∏–π
    };

    const offices = await api.searchPostOfficesByCoordinates(coordinatesRequest);
    log.success(`–ù–∞–π–¥–µ–Ω–æ ${offices.length} –æ—Ç–¥–µ–ª–µ–Ω–∏–π!`);
    
    if (offices.length > 0) {
      log.data('–ë–ª–∏–∂–∞–π—à–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è:');
      offices.slice(0, 5).forEach((office: any, index: number) => {
        log.data(`  ${index + 1}. ${office.name || '–û—Ç–¥–µ–ª–µ–Ω–∏–µ –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏'}`);
        log.data(`     üìç ${office.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        log.data(`     üìÆ ${office.index || '–ò–Ω–¥–µ–∫—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        log.data(`     üìû ${office.phone || '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        if (office.distance) {
          log.data(`     üö∂ ${office.distance} –º`);
        }
        if (office['working-hours']) {
          log.data(`     üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${office['working-hours'].map((wh: any) => `${wh.day}: ${wh.hours}`).join(', ')}`);
        }
        console.log('');
      });
      
      if (offices.length > 5) {
        log.info(`... –∏ –µ—â–µ ${offices.length - 5} –æ—Ç–¥–µ–ª–µ–Ω–∏–π`);
      }
    } else {
      log.warning('–û—Ç–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ');
    }
  } catch (error: any) {
    log.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º');
    log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
  }
}

// Run the test
testCoordinatesSearch().catch(console.error); 