import { PochtaRossiiApi } from '../src';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function testNormalization() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const token = process.env.AUTHORIZATION;
  const key = process.env.X_USER_AUTHORIZATION;

  if (!token || !key) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è AUTHORIZATION –∏–ª–∏ X_USER_AUTHORIZATION');
    console.log('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    return;
  }

  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
    const api = new PochtaRossiiApi({
      Authorization: token,
      'X-User-Authorization': key,
      baseUrl: 'https://otpravka-api.pochta.ru'
    });

    // ========================================
    // 1. –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ê–î–†–ï–°–û–í
    // ========================================
    console.log('üìç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò –ê–î–†–ï–°–û–í');
    console.log('=' .repeat(50));

    const addressTests = [
      {
        id: '1',
        'original-address': '–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1'
      },
      {
        id: '2', 
        'original-address': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 28'
      },
      {
        id: '3',
        'original-address': '–≥. –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 50, –∫–≤. 15'
      },
      {
        id: '4',
        'original-address': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –ö—Ä–∞—Å–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 1/1'
      },
      {
        id: '5',
        'original-address': '–ö–∞–∑–∞–Ω—å, —É–ª. –ë–∞—É–º–∞–Ω–∞, 10, –æ—Ñ–∏—Å 5'
      }
    ];

    for (const test of addressTests) {
      try {
        console.log(`\nüìÆ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞: "${test['original-address']}"`);
        const result = await api.normalizeAddress(test);
        
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:');
        console.log(`   –ö–∞—á–µ—Å—Ç–≤–æ: ${result['quality-code']}`);
        
        if (result['normalized-address']) {
          const addr = result['normalized-address'];
          console.log(`   –ò–Ω–¥–µ–∫—Å: ${addr.index}`);
          console.log(`   –†–µ–≥–∏–æ–Ω: ${addr.region}`);
          console.log(`   –ì–æ—Ä–æ–¥: ${addr.place}`);
          console.log(`   –£–ª–∏—Ü–∞: ${addr.street}`);
          console.log(`   –î–æ–º: ${addr.house}`);
          if (addr.building) console.log(`   –°—Ç—Ä–æ–µ–Ω–∏–µ: ${addr.building}`);
          if (addr.corpus) console.log(`   –ö–æ—Ä–ø—É—Å: ${addr.corpus}`);
          if (addr.room) console.log(`   –ö–≤–∞—Ä—Ç–∏—Ä–∞: ${addr.room}`);
        }
      } catch (error: any) {
        console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }

    // ========================================
    // 2. –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –§–ò–û
    // ========================================
    console.log('\n\nüë§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò –§–ò–û');
    console.log('=' .repeat(50));

    const fioTests = [
      {
        id: '1',
        'original-fio': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á'
      },
      {
        id: '2',
        'original-fio': '–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞'
      },
      {
        id: '3',
        'original-fio': '–°–∏–¥–æ—Ä–æ–≤ –ê.–ü.'
      },
      {
        id: '4',
        'original-fio': '–ö–æ–∑–ª–æ–≤–∞ –ï–ª–µ–Ω–∞'
      },
      {
        id: '5',
        'original-fio': '–°–º–∏—Ä–Ω–æ–≤ –í.–í.'
      }
    ];

    for (const test of fioTests) {
      try {
        console.log(`\nüë§ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –§–ò–û: "${test['original-fio']}"`);
        const result = await api.normalizeFio(test);
        
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:');
        console.log(`   –ö–∞—á–µ—Å—Ç–≤–æ: ${result['quality-code']}`);
        
        if (result['normalized-fio']) {
          const fio = result['normalized-fio'];
          console.log(`   –§–∞–º–∏–ª–∏—è: ${fio.surname}`);
          console.log(`   –ò–º—è: ${fio.name}`);
          console.log(`   –û—Ç—á–µ—Å—Ç–≤–æ: ${fio.patronymic}`);
        }
      } catch (error: any) {
        console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }

    // ========================================
    // 3. –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–õ–ï–§–û–ù–û–í
    // ========================================
    console.log('\n\nüìû –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò –¢–ï–õ–ï–§–û–ù–û–í');
    console.log('=' .repeat(50));

    const phoneTests = [
      {
        id: '1',
        'original-phone': '+7 900 123 45 67'
      },
      {
        id: '2',
        'original-phone': '8-800-555-35-35'
      },
      {
        id: '3',
        'original-phone': '495 123 45 67'
      },
      {
        id: '4',
        'original-phone': '+7 (812) 123-45-67'
      },
      {
        id: '5',
        'original-phone': '9001234567'
      }
    ];

    for (const test of phoneTests) {
      try {
        console.log(`\nüìû –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "${test['original-phone']}"`);
        const result = await api.normalizePhone(test);
        
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:');
        console.log(`   –ö–∞—á–µ—Å—Ç–≤–æ: ${result['quality-code']}`);
        
        if (result['normalized-phone']) {
          console.log(`   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: ${result['normalized-phone']}`);
        }
      } catch (error: any) {
        console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }

    // ========================================
    // 4. –ü–ê–ö–ï–¢–ù–ê–Ø –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø
    // ========================================
    console.log('\n\nüì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ö–ï–¢–ù–û–ô –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò');
    console.log('=' .repeat(50));

    console.log('\nüìÆ –ü–∞–∫–µ—Ç–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤:');
    try {
      const batchAddressResult = await api.normalizeAddress({
        id: 'batch-1',
        'original-address': '–ú–æ—Å–∫–≤–∞, –¢–≤–µ—Ä—Å–∫–∞—è —É–ª., 1'
      });
      console.log('‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      console.log(`   –ö–∞—á–µ—Å—Ç–≤–æ: ${batchAddressResult['quality-code']}`);
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    }

    console.log('\nüë§ –ü–∞–∫–µ—Ç–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –§–ò–û:');
    try {
      const batchFioResult = await api.normalizeFio({
        id: 'batch-2',
        'original-fio': '–°–∏–¥–æ—Ä–æ–≤ –ü–µ—Ç—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á'
      });
      console.log('‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –§–ò–û –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      console.log(`   –ö–∞—á–µ—Å—Ç–≤–æ: ${batchFioResult['quality-code']}`);
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    }

    console.log('\nüìû –ü–∞–∫–µ—Ç–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
    try {
      const batchPhoneResult = await api.normalizePhone({
        id: 'batch-3',
        'original-phone': '+7 495 123 45 67'
      });
      console.log('‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      console.log(`   –ö–∞—á–µ—Å—Ç–≤–æ: ${batchPhoneResult['quality-code']}`);
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error: any) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:');
    if (error.status) {
      console.error(`   –°—Ç–∞—Ç—É—Å: ${error.status}`);
    }
    if (error.data) {
      console.error(`   –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.data, null, 2)}`);
    }
    console.error(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testNormalization().catch(console.error); 