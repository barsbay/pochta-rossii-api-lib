import { PochtaRossiiApi } from '../src';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

const log = {
  info: (msg: string) => console.log(`${colors.cyan}‚ÑπÔ∏è  ${msg}${colors.reset}`),
  success: (msg: string) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  error: (msg: string) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  warning: (msg: string) => console.log(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`),
  title: (msg: string) => console.log(`\n${colors.bright}${colors.blue}${msg}${colors.reset}`),
  section: (msg: string) => console.log(`\n${colors.magenta}üìã ${msg}${colors.reset}`),
  data: (msg: string) => console.log(`${colors.white}${msg}${colors.reset}`)
};

async function testOrdersMethods() {
  log.title('üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏');
  
  // Check environment variables
  if (!process.env.AUTHORIZATION || !process.env.X_USER_AUTHORIZATION) {
    log.error('Missing required environment variables!');
    log.info('Please check your .env file contains:');
    log.info('- AUTHORIZATION (your access token)');
    log.info('- X_USER_AUTHORIZATION (your base64 encoded credentials)');
    return;
  }

  // Initialize API client
  const api = new PochtaRossiiApi({
    Authorization: process.env.AUTHORIZATION,
    'X-User-Authorization': process.env.X_USER_AUTHORIZATION
  });

  let createdOrderId: string | null = null;

  try {
    // Test 1: Create Order
    log.section('Test 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞');
    log.info('–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑...');
    
    const testOrder = {
      'address-type-to': 'DEFAULT',
      'given-name': '–ò–≤–∞–Ω',
      'mail-category': 'ORDINARY' as const,
      'mail-type': 'POSTAL_PARCEL' as const,
      mass: 1000,
      'order-num': `TEST-${Date.now()}`, // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
      'recipient-name': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
      'str-index-to': '101000',
      'tel-address': '+79001234567',
      'index-to': 101000,
      'region-to': '–ú–æ—Å–∫–≤–∞',
      'place-to': '–ú–æ—Å–∫–≤–∞',
      'street-to': '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å',
      'house-to': '1'
    };

    try {
      const createdOrder = await api.createOrder(testOrder);
      log.success('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
      log.data(`ID –∑–∞–∫–∞–∑–∞: ${createdOrder['order-num'] || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      createdOrderId = createdOrder['order-num'] || testOrder['order-num'];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
      log.data('–î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞:');
      log.data(JSON.stringify(createdOrder, null, 2));
    } catch (error: any) {
      log.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
      log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
    }

    // Test 2: Get All Orders
    log.section('Test 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤');
    log.info('–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤...');
    
    try {
      const allOrders = await api.getOrders();
      log.success(`–ü–æ–ª—É—á–µ–Ω–æ ${allOrders.length} –∑–∞–∫–∞–∑–æ–≤`);
      
      if (allOrders.length > 0) {
        log.data('–ü–µ—Ä–≤—ã–µ 3 –∑–∞–∫–∞–∑–∞:');
        allOrders.slice(0, 3).forEach((order: any, index: number) => {
          log.data(`  ${index + 1}. –ó–∞–∫–∞–∑ ${order['order-num'] || '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞'}`);
          log.data(`     –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${order['recipient-name'] || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
          log.data(`     –ê–¥—Ä–µ—Å: ${order['place-to'] || ''}, ${order['street-to'] || ''}, ${order['house-to'] || ''}`);
          log.data(`     –í–µ—Å: ${order.mass || 0} –≥`);
        });
      }
    } catch (error: any) {
      log.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤');
      log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
    }

    // Test 3: Get Order by ID (–µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª —Å–æ–∑–¥–∞–Ω)
    if (createdOrderId) {
      log.section('Test 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID');
      log.info(`–ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å ID: ${createdOrderId}`);
      
      try {
        const orderById = await api.getOrderById(createdOrderId);
        log.success('–ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω!');
        log.data('–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:');
        log.data(JSON.stringify(orderById, null, 2));
      } catch (error: any) {
        log.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ ID');
        log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
      }
    }

    // Test 4: Create Batch
    log.section('Test 4: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏');
    log.info('–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞—Ä—Ç–∏—é...');
    
    const testBatch = {
      'batch-name': `Test Batch ${Date.now()}`,
      'sending-date': new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
      'shipment-point-index': '101000'
    };

    try {
      const createdBatch = await api.createBatch(testBatch);
      log.success('–ü–∞—Ä—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      log.data(`ID –ø–∞—Ä—Ç–∏–∏: ${createdBatch['batch-name'] || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      log.data('–î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–∞—Ä—Ç–∏–∏:');
      log.data(JSON.stringify(createdBatch, null, 2));
    } catch (error: any) {
      log.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏');
      log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
    }

    // Test 5: Get All Batches
    log.section('Test 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä—Ç–∏–π');
    log.info('–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä—Ç–∏–π...');
    
    try {
      const allBatches = await api.getBatches();
      log.success(`–ü–æ–ª—É—á–µ–Ω–æ ${allBatches.length} –ø–∞—Ä—Ç–∏–π`);
      
      if (allBatches.length > 0) {
        log.data('–ü–µ—Ä–≤—ã–µ 3 –ø–∞—Ä—Ç–∏–∏:');
        allBatches.slice(0, 3).forEach((batch: any, index: number) => {
          log.data(`  ${index + 1}. –ü–∞—Ä—Ç–∏—è: ${batch['batch-name'] || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
          log.data(`     –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${batch['sending-date'] || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
          log.data(`     –ò–Ω–¥–µ–∫—Å –û–ü–°: ${batch['shipment-point-index'] || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        });
      }
    } catch (error: any) {
      log.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–π');
      log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
    }

    // Test 6: Search Orders (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫–∞–∑—ã)
    log.section('Test 6: –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤');
    log.info('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤...');
    
    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
      if (createdOrderId) {
        const searchResult = await api.getOrderById(createdOrderId);
        log.success('–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
        log.data(`–ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑: ${searchResult['order-num'] || '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞'}`);
      } else {
        log.warning('–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞');
      }
    } catch (error: any) {
      log.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤');
      log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
    }

    // Test 7: Update Order (–µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª —Å–æ–∑–¥–∞–Ω)
    if (createdOrderId) {
      log.section('Test 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞');
      log.info(`–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å ID: ${createdOrderId}`);
      
      const updatedOrder = {
        ...testOrder,
        recipientName: '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)',
        mass: 1500 // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å
      };

      try {
        const result = await api.updateOrder(createdOrderId, updatedOrder);
        log.success('–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        log.data('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:');
        log.data(JSON.stringify(result, null, 2));
      } catch (error: any) {
        log.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
        log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
      }
    }

    // Test 8: Move Order to Backlog (–µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª —Å–æ–∑–¥–∞–Ω)
    if (createdOrderId) {
      log.section('Test 8: –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–∫–∞–∑–∞ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ');
      log.info(`–ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–∫–∞–∑ ${createdOrderId} –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ...`);
      
      try {
        await api.moveOrderToBacklog(createdOrderId);
        log.success('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ!');
      } catch (error: any) {
        log.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–∫–∞–∑–∞ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ');
        log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
      }
    }

  } catch (error: any) {
    log.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞');
    log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
  }

  // Cleanup: Delete created order if exists
  if (createdOrderId) {
    log.section('Cleanup: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞');
    log.info(`–£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ —Å ID: ${createdOrderId}`);
    
    try {
      await api.deleteOrder(createdOrderId);
      log.success('–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω');
    } catch (error: any) {
      log.warning('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑');
      log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
    }
  }
}

// Run the test
testOrdersMethods().catch(console.error); 