import { PochtaRossiiApi } from '../src';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function testFioNormalization() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –§–ò–û...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const token = process.env.AUTHORIZATION;
  const key = process.env.X_USER_AUTHORIZATION;

  if (!token || !key) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è AUTHORIZATION –∏–ª–∏ X_USER_AUTHORIZATION');
    console.log('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    return;
  }

  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
    const api = new PochtaRossiiApi({
      Authorization: token,
      'X-User-Authorization': key,
      baseUrl: 'https://otpravka-api.pochta.ru'
    });

    // –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ normalizeFio
    console.log('üìù –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ normalizeFio');
    try {
      const result = await api.normalizeFio({
        id: '1',
        'original-fio': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á'
      });
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ:', result);
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
      if (error.status) console.error('   –°—Ç–∞—Ç—É—Å:', error.status);
      if (error.data) console.error('   –î–∞–Ω–Ω—ã–µ:', error.data);
    }

    // –¢–µ—Å—Ç 2: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
    console.log('\nüìù –¢–µ—Å—Ç 2: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ /1.0/clean/fio');
    try {
      const response = await api['client'].post('/1.0/clean/fio', [{
        id: '2',
        'original-fio': '–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞'
      }]);
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ:', response.data);
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
      if (error.response?.status) console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
      if (error.response?.data) console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
    }

    // –¢–µ—Å—Ç 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL
    console.log('\nüìù –¢–µ—Å—Ç 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL /1.0/clean/fio/');
    try {
      const response = await api['client'].post('/1.0/clean/fio/', [{
        id: '3',
        'original-fio': '–°–∏–¥–æ—Ä–æ–≤ –ü–µ—Ç—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á'
      }]);
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ:', response.data);
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
      if (error.response?.status) console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
      if (error.response?.data) console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–∞ —á–µ—Ä–µ–∑ GET
    console.log('\nüìù –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–∞ (GET)');
    try {
      const response = await api['client'].get('/1.0/clean/fio');
      console.log('‚úÖ –ú–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω:', response.data);
    } catch (error: any) {
      console.error('‚ùå –ú–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      if (error.response?.status) console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
    }

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API
    console.log('\nüìù –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API');
    try {
      const response = await api['client'].get('/1.0/');
      console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω:', response.data);
    } catch (error: any) {
      console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    }

    console.log('\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error: any) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFioNormalization().catch(console.error); 