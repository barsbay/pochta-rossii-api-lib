import { PochtaRossiiApi } from '../src';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

const log = {
  info: (msg: string) => console.log(`${colors.cyan}‚ÑπÔ∏è  ${msg}${colors.reset}`),
  success: (msg: string) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  error: (msg: string) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  warning: (msg: string) => console.log(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`),
  title: (msg: string) => console.log(`\n${colors.bright}${colors.blue}${msg}${colors.reset}`),
  section: (msg: string) => console.log(`\n${colors.magenta}üìã ${msg}${colors.reset}`),
  data: (msg: string) => console.log(`${colors.white}${msg}${colors.reset}`)
};

function displayPostOffices(offices: any[], title: string) {
  if (Array.isArray(offices) && offices.length > 0) {
    log.data(`üìã ${title} (${offices.length} –æ—Ç–¥–µ–ª–µ–Ω–∏–π):`);
    
    offices.forEach((office: any, index: number) => {
      log.data(`\n  ${index + 1}. ${office.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ'}`);
      log.data(`     üìç –ê–¥—Ä–µ—Å: ${office.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      log.data(`     üìÆ –ò–Ω–¥–µ–∫—Å: ${office.index || '–ò–Ω–¥–µ–∫—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      log.data(`     üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${office.phone || '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      
      if (office.distance) {
        log.data(`     üö∂ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${office.distance} –º`);
      }
      
      if (office.workHours) {
        log.data(`     üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: ${office.workHours}`);
      }
    });
  } else {
    log.warning(`${title}: –æ—Ç–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
  }
}

async function testPostOfficeSearch() {
  log.title('üèõÔ∏è –ü–æ–∏—Å–∫ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏');
  
  // Check environment variables
  if (!process.env.AUTHORIZATION || !process.env.X_USER_AUTHORIZATION) {
    log.error('Missing required environment variables!');
    log.info('Please check your .env file contains:');
    log.info('- AUTHORIZATION (your access token)');
    log.info('- X_USER_AUTHORIZATION (your base64 encoded credentials)');
    return;
  }

  // Initialize API client
  const api = new PochtaRossiiApi({
    Authorization: process.env.AUTHORIZATION,
    'X-User-Authorization': process.env.X_USER_AUTHORIZATION
  });

  try {
    // Test 1: Search by coordinates
    log.section('Test 1: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º');
    log.info('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: 55.740000, 37.610000 (—Ü–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤—ã)');
    log.info('–†–∞–¥–∏—É—Å: 5000 –º–µ—Ç—Ä–æ–≤');
    
    try {
      const coordinatesOffices = await api.searchPostOfficesByCoordinates({
        latitude: 55.740000,
        longitude: 37.610000,
        radius: 5000,
        filter: 'ALL'
      });
      
      displayPostOffices(coordinatesOffices, '–ù–∞–π–¥–µ–Ω–æ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º');
    } catch (error: any) {
      log.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º');
      log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
    }

    // Test 2: Search by address
    log.section('Test 2: –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É');
    log.info('–ê–¥—Ä–µ—Å: "–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å"');
    
    try {
      const addressOffices = await api.searchPostOfficesByAddress({
        address: '–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å',
        top: 5
      });
      
      displayPostOffices(addressOffices, '–ù–∞–π–¥–µ–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É');
    } catch (error: any) {
      log.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É');
      log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
    }

    // Test 3: Search by index
    log.section('Test 3: –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É');
    log.info('–ò–Ω–¥–µ–∫—Å: 101000 (—Ü–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤—ã)');
    
    try {
      const indexOffices = await api.searchPostOfficesByIndex({
        index: '101000'
      });
      
      displayPostOffices(indexOffices, '–ù–∞–π–¥–µ–Ω–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É');
    } catch (error: any) {
      log.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É');
      log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
    }

    // Test 4: Get all post offices (limited)
    log.section('Test 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)');
    log.info('–ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—Ç–¥–µ–ª–µ–Ω–∏–π');
    
    try {
      const allOffices = await api.getAllPostOffices(10);
      
      displayPostOffices(allOffices, '–í—Å–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 10)');
    } catch (error: any) {
      log.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π');
      log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
    }

  } catch (error: any) {
    log.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞');
    log.data(`–û—à–∏–±–∫–∞: ${error.message || error}`);
  }
}

// Run the test
testPostOfficeSearch().catch(console.error); 